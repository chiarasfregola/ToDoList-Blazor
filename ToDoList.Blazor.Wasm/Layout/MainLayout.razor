@inherits LayoutComponentBase
@using Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        @if (!isAuthenticated)
        {
            <div class="top-row px-4">
                <div class="auth-buttons">
                    <NavLink class="nav-link auth-button register" href="/register">
                        <span class="bi bi-person-plus"></span> Registrati
                    </NavLink>
                    <NavLink class="nav-link auth-button login" href="/login">
                        <span class="bi bi-person-plus"></span> Login
                    </NavLink>
                </div>
            </div>
        }
        else
        {
            <div class="top-row px-4">
                <div class="auth-buttons">
                    <NavLink class="nav-link auth-button logout" @onclick="Logout">Logout</NavLink>
                </div>
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code {
    private bool isAuthenticated = false;
    
    protected override async Task OnInitializedAsync()
    {
        //verifica lo stato di autenticazione iniziale
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        //cambio stato autenticazione
        AuthService.OnAuthStateChanged += HandleAuthStateChanged;
    }

    private void HandleAuthStateChanged()
    {
        //aggiorna lo stato
        InvokeAsync(async () =>
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            StateHasChanged();
        });
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= HandleAuthStateChanged;
    }
}