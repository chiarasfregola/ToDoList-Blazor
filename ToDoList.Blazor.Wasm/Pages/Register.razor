@page "/register"
@using Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Registrazione</PageTitle>

<div class="auth-container">
    <h1 class="auth-title">Registrazione</h1>

    <EditForm Model="@registrationModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
            <ValidationMessage For="@(() => registrationModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="registrationModel.Password" />
            <ValidationMessage For="@(() => registrationModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Registrati</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-2">@ErrorMessage</div>
        }

        <div class="mt-3">
            <a href="/login">Hai già un account? Accedi</a>
        </div>
    </EditForm>
</div>

@code {
    private RegistrationFormModel registrationModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleRegister()
    {
        bool result = await AuthService.RegisterAsync(registrationModel.Email, registrationModel.Password);

        if (result)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = "Registrazione fallita. Riprova.";
        }
    }

    private class RegistrationFormModel
    {
        [Required(ErrorMessage = "L'email è obbligatoria")]
        [EmailAddress(ErrorMessage = "Formato email non valido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La password è obbligatoria")]
        [MinLength(6, ErrorMessage = "La password deve contenere almeno 6 caratteri")]
        public string Password { get; set; } = string.Empty;
    }
}
