@page "/login"
@using Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components

<PageTitle>Login</PageTitle>

<div class="auth-container">
    <h1 class="auth-title">Login</h1>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit">Login</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert mt-3">@errorMessage</div>
        }

        <div class="mt-3">
            <a href="/register">Non hai un account? Registrati</a>
        </div>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        bool result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
        if (result)
        {
            NavigationManager.NavigateTo("/todolist");
        }
        else
        {
            errorMessage = "Login fallito. Controlla le credenziali.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "L'email è obbligatoria")]
        [EmailAddress(ErrorMessage = "Formato email non valido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La password è obbligatoria")]
        public string Password { get; set; } = string.Empty;
    }
}
