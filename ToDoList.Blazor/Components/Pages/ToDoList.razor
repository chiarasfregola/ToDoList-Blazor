@page "/todolist"
@using ToDoApi.Models
@inject AuthService AuthService
@inject ToDoService ToDoService
@inject NavigationManager _navigation
@rendermode RenderMode.InteractiveServer

<h3>La tua ToDo List</h3>

<div class="container py-4">
    <EditForm Model="newItem" OnValidSubmit="AddToDoItem">
        <DataAnnotationsValidator />
        <div class="d-flex mb-3">
            <InputText @bind-Value="newItem.Title" class="form-control me-2" placeholder="Nuovo impegno..." />
            <button type="submit" class="btn btn-primary" disabled="@(!isReady)">
                <i class="bi bi-plus-lg"></i> Aggiungi
            </button>
        </div>
    </EditForm>

    @if (!isReady)
    {
        <p><em>Caricamento in corso...</em></p>
    }
    else if (toDoItems == null)
    {
        <p>Caricamento...</p>
    }
    else if (!toDoItems.Any())
    {
        <div class="alert alert-info text-center">
            Non hai ancora impegni nella tua lista. Aggiungine uno qui sopra!
        </div>
    }
    else
    {
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th>Fatto?</th>
                    <th>Impegno</th>
                    <th>Modifica</th>
                    <th>Elimina</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in toDoItems)
                {
                    <tr>
                        <td>
                            <input type="checkbox" checked="@item.IsDone" @onchange="() => ToggleDone(item)" />
                        </td>
                        <td class="align-middle">
                            @if (editItem?.Id == item.Id)
                            {
                                <InputText @bind-Value="editItem.Title" class="form-control"
                                           @onkeydown="HandleKeyDown" />
                            }
                            else
                            {
                                <span @onclick="() => EditItem(item)">@item.Title</span>
                            }
                        </td>
                        <td class="align-middle">
                            @if (editItem?.Id == item.Id)
                            {
                                <button class="btn btn-success btn-sm me-2" @onclick="SaveEdit">
                                    <i class="bi bi-check-lg"></i> Salva
                                </button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">
                                    <i class="bi bi-x-lg"></i> Annulla
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-info btn-sm" @onclick="() => EditItem(item)">
                                    <i class="bi bi-pencil-square"></i> Modifica
                                </button>
                            }
                        </td>
                        <td class="align-middle">
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item.Id)">
                                <i class="bi bi-trash"></i> Elimina
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div>
    <button class="btn btn-danger" @onclick="LogOut">Logout</button>
</div>

@code {
    private List<ToDoItem> toDoItems;
    private ToDoItem newItem = new() { Title = string.Empty };
    private ToDoItem? editItem;
    private bool _dataLoaded = false;
    private bool isReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_dataLoaded)
        {
            _dataLoaded = true;

            await InvokeAsync(async () =>
            {
                AuthService.EnableJsInterop();
                var token = await AuthService.GetTokenAsync();

                if (!string.IsNullOrWhiteSpace(token))
                {
                    ToDoService.SetAuthorizationToken(token);
                    await LoadToDoItems();
                }

                isReady = true;
                StateHasChanged();
            });
        }
    }

    private async Task LoadToDoItems() => toDoItems = await ToDoService.GetAllToDoItemsAsync();

    private async Task AddToDoItem()
    {
        if (!isReady || string.IsNullOrWhiteSpace(newItem.Title)) return;
        await ToDoService.AddToDoItemAsync(newItem);
        newItem = new() { Title = string.Empty };
        await LoadToDoItems();
    }

    private async Task ToggleDone(ToDoItem item)
    {
        if (!isReady) return;
        item.IsDone = !item.IsDone;
        await ToDoService.UpdateToDoItemAsync(item);
        await LoadToDoItems();
    }

    private void EditItem(ToDoItem item)
    {
        editItem = new ToDoItem { Id = item.Id, Title = item.Title, IsDone = item.IsDone };
    }

    private async Task SaveEdit()
    {
        if (!isReady || editItem == null) return;
        await ToDoService.UpdateToDoItemAsync(editItem);
        editItem = null;
        await LoadToDoItems();
    }

    private void CancelEdit() => editItem = null;

    private async Task DeleteItem(int id)
    {
        if (!isReady) return;
        await ToDoService.DeleteToDoItemAsync(id);
        await LoadToDoItems();
    }

    private async Task LogOut()
    {
        await AuthService.LogoutAsync();
        _navigation.NavigateTo("/login", true);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await SaveEdit();
        else if (e.Key == "Escape") CancelEdit();
    }
}