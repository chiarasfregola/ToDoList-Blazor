@page "/login"
@using Services
@inject AuthService AuthService
@inject NavigationManager _navigation
@rendermode RenderMode.InteractiveServer

<PageTitle>Login</PageTitle>

<div class="auth-container">
    <h1 class="auth-title">Login Form</h1>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="@loginModel.Email" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText class="form-control" type="password" @bind-Value="@loginModel.Password" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</div>

@code {
    private AuthService.LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleLogin()
    {
        AuthService.EnableJsInterop();

        var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

        if (result.IsSuccess)
        {
            _navigation.NavigateTo("/todolist", true); // Forza reload della pagina
        }
        else
        {
            ErrorMessage = result.ErrorMessage;
        }
    }
}

