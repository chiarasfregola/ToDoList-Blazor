@page "/register"
@using Services
@inject AuthService AuthService
@inject NavigationManager _navigation
@rendermode RenderMode.InteractiveServer

<PageTitle>Registrazione</PageTitle>

<div class="auth-container">
    <h1 class="auth-title">Form di Registrazione</h1>

    <EditForm Model="@registrationModel" OnValidSubmit="@SavingUser">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="registrationModel.Email" class="form-control" />
        </div>

        <div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="registrationModel.Password" class="form-control" type="password" />
        </div>

        <button type="submit" class="btn btn-primary">Registrati</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-2">@ErrorMessage</div>
        }
    </EditForm>
</div>

@code {
    private AuthService.RegisterModel registrationModel = new();
    private string ErrorMessage = string.Empty;

    private async Task SavingUser()
    {
        if (string.IsNullOrEmpty(registrationModel.Email) || string.IsNullOrEmpty(registrationModel.Password))
        {
            ErrorMessage = "Email e Password sono obbligatori.";
            return;
        }

        AuthService.EnableJsInterop();

        var result = await AuthService.RegisterAsync(registrationModel.Email, registrationModel.Password);

        if (result.IsSuccess)
        {
            _navigation.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = result.ErrorMessage;
        }
    }
}
