@page "/register"
@using ToDoApi.Models
@inject AuthService AuthService
@inject NavigationManager _navigation
@rendermode RenderMode.InteractiveServer

<PageTitle>Registrazione</PageTitle>

<h1>Form di Registrazione</h1>

<EditForm Model="@registrationModel" OnValidSubmit="@SavingUser" FormName="EditForm">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="registrationModel.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="registrationModel.Password" class="form-control" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">Registrati</button>
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-2">@ErrorMessage</div>
    }
</EditForm>


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

@code {
    private RegisterModel registrationModel = new RegisterModel();
    private string ErrorMessage = "";

    private async Task SavingUser()
    {
        // Verifica se i dati sono valorizzati correttamente
        Console.WriteLine($"Email: {registrationModel.Email}");
        Console.WriteLine($"Password: {registrationModel.Password}");

        if (string.IsNullOrEmpty(registrationModel.Email) || string.IsNullOrEmpty(registrationModel.Password))
        {
            ErrorMessage = "Email e Password sono obbligatori.";
            return;
        }

        var result = await AuthService.RegisterAsync(registrationModel.Email, registrationModel.Password);

        if (result.IsSuccess)
        {
            _navigation.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = result.ErrorMessage;
        }
    }


    // Modello per la registrazione
    public class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}